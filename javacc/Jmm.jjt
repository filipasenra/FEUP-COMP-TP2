options
{
    LOOKAHEAD=1;
    MULTI=true;
    STATIC=false;
}

// When in root folder (comp2020-3a)
// gradle build
// or
// gradle test
// to run:
// java -jar comp2020-3a.jar test/fixtures/public/FindMaximum.jmm
// java -jar comp2020-3a.jar test/fixtures/public/fail/syntactical/MultipleSequential.jmm

PARSER_BEGIN(Jmm)
public class Jmm {

    private static final int MAX_ERRORS = 10;
    private int nErrors = 0;

    public static void main(String args[]) throws ParseException {
        if(args.length != 1){
            System.err.println("Usage: java Jmm <filename>");
            return;
            }
        
        try {
            Jmm myParser = new Jmm(new java.io.FileInputStream(args[0]));

            SimpleNode root = myParser.ParseExpression(); // returns reference to root node 
            if(myParser.nErrors > 0 ){
                throw new RuntimeException("Has errors");
            }
            root.dump(""); // prints the tree on the screen
            System.out.println("Finished Parsing");

        } 
        catch (java.io.FileNotFoundException e) {
            System.out.println("file " + args[0] + " not found.");
            return;
        }        
    }

    private void errorHandling(ParseException e, int kindToConsume, int kindNotToConsume) {

        nErrors++;

        if(nErrors > MAX_ERRORS){

            throw new RuntimeException("Reached maximum number of errors (" + MAX_ERRORS + ")!");
            
        }

        error_skipto(e, kindToConsume, kindNotToConsume);

    }

    private void error_skipto(ParseException e, int kindToConsume, int kindNotToConsume) {
    
        Token t;
        Token t1;

        boolean consumedParentesis = false;

        do {
            t1 = getToken(1);
            if (t1.kind == kindToConsume) {
                consumedParentesis = true;
            } else if (consumedParentesis || (t1.kind ==  kindNotToConsume))
                break;

            t = getNextToken();
        
        } while (!(t.kind == EOF));

        if(consumedParentesis)
            System.out.println("Syntactical error: " + customErrorMessage(e));  // print the error message
        else
            System.out.println("Syntactical error: Missing \")\" at line " + t1.beginLine + " and column " + t1.beginColumn + ".");
                    


    }

    private String customErrorMessage(ParseException e) {
        StringBuffer expected = new StringBuffer();

        for (int i = 0; i < e.expectedTokenSequences.length; i++) {

            for (int j = 0; j < e.expectedTokenSequences[i].length; j++) {
                expected.append(e.tokenImage[e.expectedTokenSequences[i][j]]).append(' ');
            }

            expected.append("\n\t");
        }

        return "Encountered \"" + e.currentToken.next + "\" at line " + e.currentToken.beginLine + " and column " + e.currentToken.beginColumn + " was expecting \n\t" + expected.toString();  // print the error message
    }
}

PARSER_END(Jmm)


/* Caracters to be skiped */
SKIP:
{
    " " | "\r" | "\t" | "\n" 
    | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> |         /* Inline comments */
    <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">    /* Block comments */
}

/*Reserved Words*/
TOKEN :
{
    <IMPORT: "import">
    | <CLASS: "class" >
    | <EXTENDS: "extends">
    | <PUBLIC: "public">
    | <RETURN: "return">
    | <STATIC: "static">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRING: "String">
    | <INT: "int">
    | <BOOLEAN: "boolean">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <LENGTH: "length">
    | <TRUE_: "true">
    | <FALSE_: "false">
    | <THIS: "this">
    | <NEW: "new">
}

/*Identifier and IntegerLiteral*/
TOKEN:
{
    /*IntegerLiteral*/
     < INTEGER_LITERAL : <DECIMAL> | <HEXADECIMAL> | <BINARY> | <OCTAL> > 
   | < #DECIMAL: (["0"-"9"])+ > 
   | < #HEXADECIMAL: ("0x" | "0X")(["0"-"9", "A"-"F", "a"-"f"])+ > 
   | < #BINARY: ("0b" | "0B")(["0", "1"])+ > 
   | < #OCTAL: "0"(["0"-"7"])* > 

   /*Identifier*/
   | < IDENTIFIER : <LETTER> (<LETTER> | <DIGIT>)* > 
   | < #LETTER : ["$", "_", "a"-"z", "A"-"Z"] > 
   | < #DIGIT : ["0"-"9"] >
    
}

/* Delimitaters*/
TOKEN : {
    < SEMICOLON: ";">
    | < COLON: ",">
    | < LEFT_BRACE: "{">
    | < RIGHT_BRACE: "}">
    | < LEFT_BRACKET: "[">
    | < RIGHT_BRACKET: "]">
    | < LEFT_PARENTESIS: "(">
    | < RIGHT_PARENTESIS: ")">
    | < DOT: ".">
}

/*Operators*/
TOKEN : {
    <SUM: "+">
    | <SUB: "-">
    | <MUL: "*">
    | <DIV: "/">
    | <LESS_THAN: "<">
    | <AND: "&&"> 
    | <NEGATION: "!">
    | <ASSIGN: "=">
}

SimpleNode ParseExpression(): {}
{
    (Import())* ClassDeclaration() <EOF> {return jjtThis;} //Java code inside brackets

}

void ClassDeclaration(): {Token className; Token extendsClass;} {

    <CLASS> className = <IDENTIFIER> (<EXTENDS> extendsClass = <IDENTIFIER>  {jjtThis.ext = extendsClass.image;})?
    <LEFT_BRACE> 
        ( VarDeclaration() )*
        ( MethodDeclaration() )*
    <RIGHT_BRACE>
    { jjtThis.name = className.image; }

}

void Import() : {} {

    <IMPORT> (<STATIC> {jjtThis.isStatic = true; })? (IdentifierFromImport() (<DOT> IdentifierFromImport())? )
    (ImportMethod())? 
    <SEMICOLON>

}

void IdentifierFromImport() #Identifier : {Token t;} {

    t = <IDENTIFIER> {jjtThis.val = t.image;}
}

void ImportMethod() : {} {

    <LEFT_PARENTESIS> (ImportMethodArgs())? <RIGHT_PARENTESIS> Type()
}

void ImportMethodArgs() : {} {

    Type() (<COLON> Type())*
}

void VarDeclaration() : {Token t;} {
    Type() t = <IDENTIFIER> <SEMICOLON> {jjtThis.name = t.image;}
}

void Type() : {Token t;} {
   ((t = <INT> (<LEFT_BRACKET> <RIGHT_BRACKET> {jjtThis.isArray = true;})? )
   | t = <BOOLEAN> | t = <IDENTIFIER> | t = <STRING> | t=<VOID>)
   { jjtThis.type = t.image; }
}

void MethodDeclaration() #void : {Token t;} {
    <PUBLIC> 
    ((<STATIC> <VOID> <MAIN>
    <LEFT_PARENTESIS> 
        <STRING> <LEFT_BRACKET> <RIGHT_BRACKET> <IDENTIFIER>
    <RIGHT_PARENTESIS>
    <LEFT_BRACE> 
        (LOOKAHEAD(2) VarDeclaration())* 
        (Statement())*
    <RIGHT_BRACE>) #MainDeclaration
    |
    (Type() t = <IDENTIFIER>
    <LEFT_PARENTESIS>
        (Paramethers())?
    <RIGHT_PARENTESIS>
    <LEFT_BRACE>
        (LOOKAHEAD(2) VarDeclaration())*
        (Statement())*
        <RETURN>
        Expression()
        <SEMICOLON>
    <RIGHT_BRACE> {jjtThis.name = t.image;} ) #MethodDeclaration )

}

void Paramethers() : {} {

    Arg() (<COLON> Arg())*
}

void Arg() : {Token t;} { 
    
    Type() t=<IDENTIFIER> {jjtThis.val = t.image;} 
}

void Statement() #void : {} {

    (<LEFT_BRACE> (Statement())* <RIGHT_BRACE> ) #StatmentBlock
    | If()
    | While()
    | (LOOKAHEAD(2) Equality() | (Expression() <SEMICOLON>) ) #Statement
}

void Conditional() #void: {} {
    <LEFT_PARENTESIS> Expression() <RIGHT_PARENTESIS>
}

void If() : {} {
    <IF> 
        Conditional()
        Statement()
    <ELSE>
        Statement()
}

void While() : {} {
    <WHILE> 
        try {
            Conditional()

        } catch (ParseException e) {
            
            errorHandling(e, RIGHT_PARENTESIS, LEFT_BRACE);
        }
        
        Statement()
}

void Equality() : {Token t;} {
    (t = <IDENTIFIER> {jjtThis.val = t.image;}
        (accessToArray() #accessToArray)? ) #Identifier
        <ASSIGN> Expression() <SEMICOLON>
}

void Expression() #void : {} {

    AND()

}

 void AND() #void : {} {
     LessThan() (LOOKAHEAD(2) <AND> LessThan() #AND(2))*
 }

 void LessThan() #void : {} {
     Sum() (LOOKAHEAD(2) <LESS_THAN> Sum() #LESSTHAN(2))*
 }

 void Sum() #void : {} {
     Sub() (LOOKAHEAD(2) <SUM> Sub() #SUM(2))*
 }

 void Sub() #void : {} {
      Mul() (LOOKAHEAD(2) <SUB> Mul() #SUB(2))*
  }

 void Mul() #void : {} {
     Div() (LOOKAHEAD(2) <MUL> Div() #MUL(2))*
 }

 void Div() #void : {} {
      Literal() (LOOKAHEAD(2) <DIV> Literal() #DIV(2))*
  }

void Literal() #void : {Token t;} {
   DotExpression() |
   ( t= <INTEGER_LITERAL> {jjtThis.val = t.image;} #Literal) | ((t = <TRUE_> | t = <FALSE_>) {jjtThis.val = t.image.equals("true") ;} #Boolean)
}

void DotExpression() #void : {Token t;} {
     FinalExpression() (LOOKAHEAD(2) ((<DOT> (t = <IDENTIFIER> | t = <LENGTH>) {jjtThis.val = t.image;}
            (<LEFT_PARENTESIS>
                (Expression() (<COLON> Expression())*)?
            <RIGHT_PARENTESIS>)?) #Identifier) #DotExpression(2))?
 } 

void FinalExpression() #void : {Token t;} {

    New()
    | ( <NEGATION> Expression()) #Negation
    | ( <LEFT_PARENTESIS> Expression() <RIGHT_PARENTESIS>)
    | (t = <IDENTIFIER> {jjtThis.val = t.image;} #Identifier) (accessToArray() #accessToArray)?
    | (t = <THIS> {jjtThis.val = t.image;} #Identifier)
}

void New() #void : {} {
     <NEW> ( InitializeArray() | NewObject() )
}

void InitializeArray() : {} {
    <INT> accessToArray()
}

void NewObject() : {Token t;} {
    t = <IDENTIFIER> <LEFT_PARENTESIS> <RIGHT_PARENTESIS> {jjtThis.val = t.image;}
}

void accessToArray() #void : {} {

    <LEFT_BRACKET> Expression() <RIGHT_BRACKET>

}