/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Jmm.jj */
/*@egen*/options
{
    LOOKAHEAD=1;
               
}

// When in javacc folder
// jjtree Jmm.jjt
// javacc Jmm.jj
// javac *.java
// java Jmm ../bin/test/fixtures/public/Lazysort.jmm

PARSER_BEGIN(Jmm)
public class Jmm/*@bgen(jjtree)*/implements JmmTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTJmmState jjtree = new JJTJmmState();

/*@egen*/

    private static final int MAX_ERRORS = 10;
    private static int nErrors = 0;

    public static void main(String args[]) throws ParseException {
        
        nErrors = 0;

        if(args.length != 1){
            System.err.println("Usage: java Jmm <filename>");
            return;
            }
        
        try {
            Jmm myParser = new Jmm(new java.io.FileInputStream(args[0]));

            SimpleNode root = myParser.ParseExpression(); // returns reference to root node 
            root.dump(""); // prints the tree on the screen
            System.out.println("Finished Parsing");

        } 
        catch (java.io.FileNotFoundException e) {
            System.out.println("file " + args[0] + " not found.");
            return;
        }        
    }

    private static void errorHandling(ParseException e, int kind) {

        System.out.println("Syntatic error: " + e.toString());  // print the error message
        
        nErrors++;

        if(nErrors > MAX_ERRORS){

            System.out.println("Reached maximum number of errors (" + MAX_ERRORS + ")!");
            System.exit(-1);
        }

        error_skipto(kind);

    }

    private static void error_skipto(int kind) {
    
        Token t;

        do {
            t = getNextToken();
        } while (t.kind != kind);
    }
}

PARSER_END(Jmm)


/* Caracters to be skiped */
SKIP:
{
    " " | "\r" | "\t" | "\n" 
    | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> |         /* Inline comments */
    <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">    /* Block comments */
}

/*Reserved Words*/
TOKEN :
{
    <IMPORT: "import" (~[";"])* ";" > //Temporary: Change when professors give all the rules erase
    | <CLASS: "class" >
    | <EXTENDS: "extends">
    | <PUBLIC: "public">
    | <RETURN: "return">
    | <STATIC: "static">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRING: "String">
    | <INT: "int">
    | <BOOLEAN: "boolean">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <LENGTH: "length">
    | <TRUE_: "true">
    | <FALSE_: "false">
    | <THIS: "this">
    | <NEW: "new">
}

/*Identifier and IntegerLiteral*/
TOKEN:
{
    /*IntegerLiteral*/
     < INTEGER_LITERAL : <DECIMAL> | <HEXADECIMAL> | <BINARY> | <OCTAL> > 
   | < #DECIMAL: (["0"-"9"])+ > 
   | < #HEXADECIMAL: ("0x" | "0X")(["0"-"9", "A"-"F", "a"-"f"])+ > 
   | < #BINARY: ("0b" | "0B")(["0", "1"])+ > 
   | < #OCTAL: "0"(["0"-"7"])* > 

   /*Identifier*/
   | < IDENTIFIER : <LETTER> (<LETTER> | <DIGIT>)* > 
   | < #LETTER : ["$", "_", "a"-"z", "A"-"Z"] > 
   | < #DIGIT : ["0"-"9"] >
    
}

/* Delimitaters*/
TOKEN : {
    < SEMICOLON: ";">
    | < COLON: ",">
    | < LEFT_BRACE: "{">
    | < RIGHT_BRACE: "}">
    | < LEFT_BRACKET: "[">
    | < RIGHT_BRACKET: "]">
    | < LEFT_PARENTESIS: "(">
    | < RIGHT_PARENTESIS: ")">
    | < DOT: ".">
}

/*Operators*/
TOKEN : {
    <SUM: "+">
    | <SUB: "-">
    | <MUL: "*">
    | <DIV: "/">
    | <LESS_THAN: "<">
    | <AND: "&&"> 
    | <NEGATION: "!">
    | <ASSIGN: "=">
}

SimpleNode ParseExpression(): {/*@bgen(jjtree) ParseExpression */
  ASTParseExpression jjtn000 = new ASTParseExpression(JJTPARSEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParseExpression */
    try {
/*@egen*/
    ClassDeclaration() <EOF>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ //Java code inside brackets

}

void ClassDeclaration(): {/*@bgen(jjtree) ClassDeclaration */
  ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ClassDeclaration */
    try {
/*@egen*/
    (<IMPORT>)*
    <CLASS> <IDENTIFIER> (<EXTENDS> <IDENTIFIER>)? 
    <LEFT_BRACE> 
        ( VarDeclaration() )*
        ( MethodDeclaration() )*
    <RIGHT_BRACE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

void VarDeclaration() : {/*@bgen(jjtree) VarDeclaration */
                         ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) VarDeclaration */
    try {
/*@egen*/
    Type() t = <IDENTIFIER> <SEMICOLON>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/ {jjtn000.val = t.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Type()       : {} {
   (<INT> (<LEFT_BRACKET> <RIGHT_BRACKET>)?)
   | <BOOLEAN> | <IDENTIFIER>
}

void MethodDeclaration() : {/*@bgen(jjtree) MethodDeclaration */
  ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) MethodDeclaration */
    try {
/*@egen*/
    <PUBLIC> 
    ((<STATIC> <VOID> <MAIN> 
    <LEFT_PARENTESIS> 
        <STRING> <LEFT_BRACKET> <RIGHT_BRACKET> <IDENTIFIER>
    <RIGHT_PARENTESIS>
    <LEFT_BRACE> 
        (LOOKAHEAD(2) VarDeclaration())* 
        (Statement())*
    <RIGHT_BRACE>)
    |
    (Type() <IDENTIFIER> 
    <LEFT_PARENTESIS> 
        (Type() <IDENTIFIER> (<COLON> Type() <IDENTIFIER>)*)?
    <RIGHT_PARENTESIS>
    <LEFT_BRACE> 
        (LOOKAHEAD(2) VarDeclaration())* 
        (Statement())*
        <RETURN>
        Expression()
        <SEMICOLON>
    <RIGHT_BRACE>))/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}


void Statement(): {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Statement */
    try {
/*@egen*/

    (<LEFT_BRACE> (Statement())* <RIGHT_BRACE>)
    | If()
    | While()
    | (LOOKAHEAD(2) Equality() | (Expression() <SEMICOLON>))/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void If() : {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) If */
    try {
/*@egen*/
    <IF> 
        <LEFT_PARENTESIS> Expression() <RIGHT_PARENTESIS>
        Statement()
    <ELSE>
        Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void While() : {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) While */
    try {
/*@egen*/
    <WHILE> 
        try {
            <LEFT_PARENTESIS> Expression() <RIGHT_PARENTESIS>

        } catch (ParseException e) {
            
            errorHandling(e, RIGHT_PARENTESIS);
        }
        
        Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Equality() : {/*@bgen(jjtree) Equality */
                   ASTEquality jjtn000 = new ASTEquality(JJTEQUALITY);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Equality */
    try {
/*@egen*/
    t = <IDENTIFIER> 
        (<LEFT_BRACKET> Expression() <RIGHT_BRACKET>)? 
        <ASSIGN> Expression() <SEMICOLON>/*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                          }
/*@egen*/ {jjtn000.val = t.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expression() : {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Expression */
    try {
/*@egen*/

    AND()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

 void AND()       : {} {
     LessThan() (LOOKAHEAD(2) <AND>/*@bgen(jjtree) #AND( 2) */
                                    {
                                      ASTAND jjtn001 = new ASTAND(JJTAND);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*/ LessThan()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte001;
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        throw (ParseException)jjte001;
                                      }
                                      throw (Error)jjte001;
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                      }
                                    }
/*@egen*/        )*
 }

 void LessThan()       : {} {
     Sum() (LOOKAHEAD(2) <LESS_THAN>/*@bgen(jjtree) #LESSTHAN( 2) */
                                     {
                                       ASTLESSTHAN jjtn001 = new ASTLESSTHAN(JJTLESSTHAN);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*/ Sum()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                       }
                                     }
/*@egen*/             )*
 }

 void Sum()       : {} {
     Mul() (LOOKAHEAD(2) (<SUM> | <SUB>)/*@bgen(jjtree) #SUM( 2) */
                                         {
                                           ASTSUM jjtn001 = new ASTSUM(JJTSUM);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
                                         }
                                         try {
/*@egen*/ Mul()/*@bgen(jjtree)*/
                                         } catch (Throwable jjte001) {
                                           if (jjtc001) {
                                             jjtree.clearNodeScope(jjtn001);
                                             jjtc001 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte001 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte001;
                                           }
                                           if (jjte001 instanceof ParseException) {
                                             throw (ParseException)jjte001;
                                           }
                                           throw (Error)jjte001;
                                         } finally {
                                           if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  2);
                                           }
                                         }
/*@egen*/        )*
 }

 void Mul()       : {} {
     Literal() (LOOKAHEAD(2) (<MUL> | <DIV>)/*@bgen(jjtree) #MUL( 2) */
                                             {
                                               ASTMUL jjtn001 = new ASTMUL(JJTMUL);
                                               boolean jjtc001 = true;
                                               jjtree.openNodeScope(jjtn001);
                                             }
                                             try {
/*@egen*/ Literal()/*@bgen(jjtree)*/
                                             } catch (Throwable jjte001) {
                                               if (jjtc001) {
                                                 jjtree.clearNodeScope(jjtn001);
                                                 jjtc001 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte001 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte001;
                                               }
                                               if (jjte001 instanceof ParseException) {
                                                 throw (ParseException)jjte001;
                                               }
                                               throw (Error)jjte001;
                                             } finally {
                                               if (jjtc001) {
                                                 jjtree.closeNodeScope(jjtn001,  2);
                                               }
                                             }
/*@egen*/        )*
 } 

void Literal()       : {Token t;} {
   DotExpression() | 
   ( t= <INTEGER_LITERAL> | t = <TRUE_> | t = <FALSE_>)/*@bgen(jjtree) Literal */
                                                        {
                                                          ASTLiteral jjtn001 = new ASTLiteral(JJTLITERAL);
                                                          boolean jjtc001 = true;
                                                          jjtree.openNodeScope(jjtn001);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                          jjtc001 = false;
                                                        }
/*@egen*/ {jjtn001.val = t.image;}/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001, true);
                                                          }
                                                        }
/*@egen*/         
}

void DotExpression()       : {} {
     BracketExpression() (LOOKAHEAD(2) <DOT> (<IDENTIFIER> | <LENGTH>)
            (<LEFT_PARENTESIS> 
                (Expression() (<COLON> Expression())*)?
            <RIGHT_PARENTESIS>)?
        )*
 } 

 void BracketExpression()       : {} {
     FinalExpression() (LOOKAHEAD(2) <LEFT_BRACKET> Expression() <RIGHT_BRACKET>)*
 } 

void FinalExpression()       : {Token t;} {

    New()
    | ( <NEGATION>/*@bgen(jjtree) Negation */
                   {
                     ASTNegation jjtn001 = new ASTNegation(JJTNEGATION);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
                   }
/*@egen*/          )
    | ( <LEFT_PARENTESIS> Expression() <RIGHT_PARENTESIS>)
    | ( t = <IDENTIFIER> | t = <THIS>)/*@bgen(jjtree) Literal */
                                       {
                                         ASTLiteral jjtn002 = new ASTLiteral(JJTLITERAL);
                                         boolean jjtc002 = true;
                                         jjtree.openNodeScope(jjtn002);
                                       }
                                       try {
/*@egen*//*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn002, true);
                                         jjtc002 = false;
                                       }
/*@egen*/ {jjtn002.val = t.image;}/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc002) {
                                           jjtree.closeNodeScope(jjtn002, true);
                                         }
                                       }
/*@egen*/         
}

void New()       : {} {
     <NEW> ( NewIntObject() | NewObject() )
}

void NewIntObject() : {/*@bgen(jjtree) NewIntObject */
  ASTNewIntObject jjtn000 = new ASTNewIntObject(JJTNEWINTOBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) NewIntObject */
    try {
/*@egen*/
    <INT> <LEFT_BRACKET> Expression() <RIGHT_BRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NewObject() : {/*@bgen(jjtree) NewObject */
                    ASTNewObject jjtn000 = new ASTNewObject(JJTNEWOBJECT);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) NewObject */
    try {
/*@egen*/
    t = <IDENTIFIER> <LEFT_PARENTESIS> <RIGHT_PARENTESIS>/*@bgen(jjtree)*/
                                                          {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
                                                          }
/*@egen*/ {jjtn000.val = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}